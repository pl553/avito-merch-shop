// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	// Password Пароль для аутентификации.
	Password string `json:"password"`

	// Username Имя пользователя для аутентификации.
	Username string `json:"username"`
}

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	// Token JWT-токен для доступа к защищенным ресурсам.
	Token *string `json:"token,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Errors Сообщение об ошибке, описывающее проблему.
	Errors *string `json:"errors,omitempty"`
}

// InfoResponse defines model for InfoResponse.
type InfoResponse struct {
	CoinHistory *struct {
		Received *[]struct {
			// Amount Количество полученных монет.
			Amount *int `json:"amount,omitempty"`

			// FromUser Имя пользователя, который отправил монеты.
			FromUser *string `json:"fromUser,omitempty"`
		} `json:"received,omitempty"`
		Sent *[]struct {
			// Amount Количество отправленных монет.
			Amount *int `json:"amount,omitempty"`

			// ToUser Имя пользователя, которому отправлены монеты.
			ToUser *string `json:"toUser,omitempty"`
		} `json:"sent,omitempty"`
	} `json:"coinHistory,omitempty"`

	// Coins Количество доступных монет.
	Coins     *int `json:"coins,omitempty"`
	Inventory *[]struct {
		// Quantity Количество предметов.
		Quantity *int `json:"quantity,omitempty"`

		// Type Тип предмета.
		Type *string `json:"type,omitempty"`
	} `json:"inventory,omitempty"`
}

// SendCoinRequest defines model for SendCoinRequest.
type SendCoinRequest struct {
	// Amount Количество монет, которые необходимо отправить.
	Amount int `json:"amount"`

	// ToUser Имя пользователя, которому нужно отправить монеты.
	ToUser string `json:"toUser"`
}

// PostApiAuthJSONRequestBody defines body for PostApiAuth for application/json ContentType.
type PostApiAuthJSONRequestBody = AuthRequest

// PostApiSendCoinJSONRequestBody defines body for PostApiSendCoin for application/json ContentType.
type PostApiSendCoinJSONRequestBody = SendCoinRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Аутентификация и получение JWT-токена. При первой аутентификации пользователь создается автоматически.
	// (POST /api/auth)
	PostApiAuth(c *gin.Context)
	// Купить предмет за монеты.
	// (GET /api/buy/{item})
	GetApiBuyItem(c *gin.Context, item string)
	// Получить информацию о монетах, инвентаре и истории транзакций.
	// (GET /api/info)
	GetApiInfo(c *gin.Context)
	// Отправить монеты другому пользователю.
	// (POST /api/sendCoin)
	PostApiSendCoin(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostApiAuth operation middleware
func (siw *ServerInterfaceWrapper) PostApiAuth(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAuth(c)
}

// GetApiBuyItem operation middleware
func (siw *ServerInterfaceWrapper) GetApiBuyItem(c *gin.Context) {

	var err error

	// ------------- Path parameter "item" -------------
	var item string

	err = runtime.BindStyledParameterWithOptions("simple", "item", c.Param("item"), &item, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter item: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiBuyItem(c, item)
}

// GetApiInfo operation middleware
func (siw *ServerInterfaceWrapper) GetApiInfo(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiInfo(c)
}

// PostApiSendCoin operation middleware
func (siw *ServerInterfaceWrapper) PostApiSendCoin(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiSendCoin(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/auth", wrapper.PostApiAuth)
	router.GET(options.BaseURL+"/api/buy/:item", wrapper.GetApiBuyItem)
	router.GET(options.BaseURL+"/api/info", wrapper.GetApiInfo)
	router.POST(options.BaseURL+"/api/sendCoin", wrapper.PostApiSendCoin)
}

type PostApiAuthRequestObject struct {
	Body *PostApiAuthJSONRequestBody
}

type PostApiAuthResponseObject interface {
	VisitPostApiAuthResponse(w http.ResponseWriter) error
}

type PostApiAuth200JSONResponse AuthResponse

func (response PostApiAuth200JSONResponse) VisitPostApiAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAuth400JSONResponse ErrorResponse

func (response PostApiAuth400JSONResponse) VisitPostApiAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAuth401JSONResponse ErrorResponse

func (response PostApiAuth401JSONResponse) VisitPostApiAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAuth500JSONResponse ErrorResponse

func (response PostApiAuth500JSONResponse) VisitPostApiAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetApiBuyItemRequestObject struct {
	Item string `json:"item"`
}

type GetApiBuyItemResponseObject interface {
	VisitGetApiBuyItemResponse(w http.ResponseWriter) error
}

type GetApiBuyItem200Response struct {
}

func (response GetApiBuyItem200Response) VisitGetApiBuyItemResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetApiBuyItem400JSONResponse ErrorResponse

func (response GetApiBuyItem400JSONResponse) VisitGetApiBuyItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetApiBuyItem401JSONResponse ErrorResponse

func (response GetApiBuyItem401JSONResponse) VisitGetApiBuyItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetApiBuyItem500JSONResponse ErrorResponse

func (response GetApiBuyItem500JSONResponse) VisitGetApiBuyItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetApiInfoRequestObject struct {
}

type GetApiInfoResponseObject interface {
	VisitGetApiInfoResponse(w http.ResponseWriter) error
}

type GetApiInfo200JSONResponse InfoResponse

func (response GetApiInfo200JSONResponse) VisitGetApiInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiInfo400JSONResponse ErrorResponse

func (response GetApiInfo400JSONResponse) VisitGetApiInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetApiInfo401JSONResponse ErrorResponse

func (response GetApiInfo401JSONResponse) VisitGetApiInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetApiInfo500JSONResponse ErrorResponse

func (response GetApiInfo500JSONResponse) VisitGetApiInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostApiSendCoinRequestObject struct {
	Body *PostApiSendCoinJSONRequestBody
}

type PostApiSendCoinResponseObject interface {
	VisitPostApiSendCoinResponse(w http.ResponseWriter) error
}

type PostApiSendCoin200Response struct {
}

func (response PostApiSendCoin200Response) VisitPostApiSendCoinResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostApiSendCoin400JSONResponse ErrorResponse

func (response PostApiSendCoin400JSONResponse) VisitPostApiSendCoinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostApiSendCoin401JSONResponse ErrorResponse

func (response PostApiSendCoin401JSONResponse) VisitPostApiSendCoinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostApiSendCoin500JSONResponse ErrorResponse

func (response PostApiSendCoin500JSONResponse) VisitPostApiSendCoinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Аутентификация и получение JWT-токена. При первой аутентификации пользователь создается автоматически.
	// (POST /api/auth)
	PostApiAuth(ctx context.Context, request PostApiAuthRequestObject) (PostApiAuthResponseObject, error)
	// Купить предмет за монеты.
	// (GET /api/buy/{item})
	GetApiBuyItem(ctx context.Context, request GetApiBuyItemRequestObject) (GetApiBuyItemResponseObject, error)
	// Получить информацию о монетах, инвентаре и истории транзакций.
	// (GET /api/info)
	GetApiInfo(ctx context.Context, request GetApiInfoRequestObject) (GetApiInfoResponseObject, error)
	// Отправить монеты другому пользователю.
	// (POST /api/sendCoin)
	PostApiSendCoin(ctx context.Context, request PostApiSendCoinRequestObject) (PostApiSendCoinResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostApiAuth operation middleware
func (sh *strictHandler) PostApiAuth(ctx *gin.Context) {
	var request PostApiAuthRequestObject

	var body PostApiAuthJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAuth(ctx, request.(PostApiAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAuth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiAuthResponseObject); ok {
		if err := validResponse.VisitPostApiAuthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiBuyItem operation middleware
func (sh *strictHandler) GetApiBuyItem(ctx *gin.Context, item string) {
	var request GetApiBuyItemRequestObject

	request.Item = item

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiBuyItem(ctx, request.(GetApiBuyItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiBuyItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiBuyItemResponseObject); ok {
		if err := validResponse.VisitGetApiBuyItemResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiInfo operation middleware
func (sh *strictHandler) GetApiInfo(ctx *gin.Context) {
	var request GetApiInfoRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiInfo(ctx, request.(GetApiInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiInfoResponseObject); ok {
		if err := validResponse.VisitGetApiInfoResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiSendCoin operation middleware
func (sh *strictHandler) PostApiSendCoin(ctx *gin.Context) {
	var request PostApiSendCoinRequestObject

	var body PostApiSendCoinJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiSendCoin(ctx, request.(PostApiSendCoinRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiSendCoin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiSendCoinResponseObject); ok {
		if err := validResponse.VisitPostApiSendCoinResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}
